buildscript {
    repositories {
        maven { url = "https://maven.minecraftforge.net" }
        maven { url = "https://repo.spongepowered.org/repository/maven-public/" }
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "4.1.+", changing: true
        classpath "org.spongepowered:mixingradle:0.7-SNAPSHOT"
    }
}
plugins {
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "java" // java plugin is needed for the shadow plugin to work
    id "eclipse"
    id "maven-publish"
}
apply plugin: "net.minecraftforge.gradle"
apply plugin: "org.spongepowered.mixin"

version = "1.16.x-2.0.0"
group = "dk.zlepper.itlt" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "itlt"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.

println("Java: " + System.getProperty("java.version") + " JVM: " + System.getProperty("java.vm.version") + "(" + System.getProperty("java.vendor") + ") Arch: " + System.getProperty("os.arch"))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: "snapshot", version: "20200723-1.16.1"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file("run")

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            //property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property "forge.logging.console.level", "info"

            arg "-mixin.config=itlt.mixins.json"

            mods {
                itlt {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file("run")

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            //property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property "forge.logging.console.level", "info"

            arg "-mixin.config=itlt.mixins.json"

            mods {
                itlt {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file("run")

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            //property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property "forge.logging.console.level", "info"

            args "--mod", "itlt", "--all", "--output", file("src/generated/resources/")

            mods {
                itlt {
                    source sourceSets.main
                }
            }
        }
    }
}

configurations {
    shade
}

repositories {
    maven {
        url = "https://cursemaven.com"
        content { includeGroup "curse.maven" }
    }
    mavenCentral()
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then "net.minecraft" it is assumed
    // that the dep is a ForgeGradle "patcher" dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:1.16.5-36.1.16"
    compile "org.spongepowered:mixin:0.8.2"
    annotationProcessor "org.spongepowered:mixin:0.8.2:processor"

    // itlt uses the "Base62" library for Base62 encoding of checksums
    // Why not Base64? Base62 is purely letters and numbers (no special characters like +, /, =, etc) and lacks the
    // padding requirement of Base64. These things allow for similar encoding efficiency to Base64 while also looking
    // prettier as well as looking less scary to a technophobe
    implementation "io.seruco.encoding:base62:0.1.3" // https://github.com/seruco/base62
    shade "io.seruco.encoding:base62:0.1.3"

    // itlt uses the "Imgscalr" library to easily resize icons as needed while preserving their original aspect ratios
    implementation "org.imgscalr:imgscalr-lib:4.2"
    shade "org.imgscalr:imgscalr-lib:4.2"
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "itlt",
            "Specification-Vendor": "Paint_Ninja",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Implementation-Vendor" : "Paint_Ninja",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "itlt.mixins.json",
            "Main-Class": "dk.zlepper.itlt.Main" // so that the popup code works
        ])
    }
}

shadowJar {
    archiveClassifier.set("")
    configurations = [project.configurations.shade]
    relocate "lib.group", "${project.group}.shadow.lib.group" // ensure repackaged packages have unique names
}

reobf {
    shadowJar { }
}

tasks.build.dependsOn reobfShadowJar
jar.finalizedBy("reobfShadowJar")

mixin {
    add sourceSets.main, "itlt.refmap.json"
}